buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

configurations {
    r8
}

group = 'com.gi.plugins'
version = '0.3.1'
def androidToolsVersion = '30.3.1'

repositories {
    google()
    jcenter()
    mavenCentral()
}
dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation "com.android.tools:common:$androidToolsVersion"
    implementation "com.android.tools.apkparser:apkanalyzer:$androidToolsVersion"
    implementation group: 'org.smali', name: 'dexlib2', version: '2.2.4'
    implementation 'org.celtric.kotlin:kotlin-html:0.1.4'
//    implementation group: 'com.openhtmltopdf', name: 'openhtmltopdf-pdfbox', version: '1.0.8'
    implementation group: 'com.google.archivepatcher', name: 'archive-patch-generator', version: '1.0.4'
    implementation group: 'com.google.archivepatcher', name: 'archive-patch-explainer', version: '1.0.4'

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    r8 'com.android.tools:r8:3.3.28'
}
compileKotlin {
    def compilerArgs = ["-Xopt-in=kotlin.RequiresOptIn"]
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += compilerArgs
    }
}
application {
    mainClassName = 'MainKt'
}

shadowJar {
    zip64 true
    mergeServiceFiles {
        exclude "META-INF/*.SF"
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/maven/**'
        exclude 'META-INF/services/**'
        exclude 'META-INF/proguard/**'
    }
    exclude '**/*.properties'
    exclude "LICENSE*"
    exclude '**/*.kotlin_builtins'
    exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'
//    exclude '**/*.txt'
    exclude '**/*.xml'
    exclude '**/private-apis.txt'
    exclude '**/public-suffix-list.txt'
    exclude '**/module-info.class'
    exclude '**/*.proto'
    exclude '**/*.icc'
    exclude 'com/sun/**'
    exclude 'typos/**'
    exclude 'xsd/**'
    exclude 'com/android/dvlib/**'
    exclude 'com/android/sdklib/**'
    exclude 'com/intellij/**'
}

def r8File = new File("$buildDir/libs/$archivesBaseName-r8.jar")
def r8Jar = tasks.register('r8Jar', JavaExec) { task ->
    def rules = file('src/main/shrink-rules.pro')
    task.inputs.files(shadowJar.outputs.files, rules)
    task.outputs.file(r8File)

    task.classpath(configurations.r8)
    task.main = 'com.android.tools.r8.R8'
    task.args = [
            '--release',
            '--classfile',
            '--output', r8File.toString(),
            '--pg-conf', rules.toString(),
            '--lib', System.properties.get('java.home').toString()
    ]
    doFirst {
        task.args += shadowJar.archiveFile.get().asFile
    }
}

task minimizedJar(dependsOn: r8Jar)

tasks.named('assemble').configure { task ->
    task.dependsOn(r8Jar)
}

publishing {
    publications {
        apkSize(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'ApkSize'
            url = layout.buildDirectory.dir("repo")
        }
    }
}